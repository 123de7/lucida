/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef KaldiService_H
#define KaldiService_H

#include <thrift/TDispatchProcessor.h>
#include "kaldi_types.h"



class KaldiServiceIf {
 public:
  virtual ~KaldiServiceIf() {}
  virtual void kaldi_asr(std::string& _return, const std::string& audio_file) = 0;
};

class KaldiServiceIfFactory {
 public:
  typedef KaldiServiceIf Handler;

  virtual ~KaldiServiceIfFactory() {}

  virtual KaldiServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(KaldiServiceIf* /* handler */) = 0;
};

class KaldiServiceIfSingletonFactory : virtual public KaldiServiceIfFactory {
 public:
  KaldiServiceIfSingletonFactory(const boost::shared_ptr<KaldiServiceIf>& iface) : iface_(iface) {}
  virtual ~KaldiServiceIfSingletonFactory() {}

  virtual KaldiServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(KaldiServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<KaldiServiceIf> iface_;
};

class KaldiServiceNull : virtual public KaldiServiceIf {
 public:
  virtual ~KaldiServiceNull() {}
  void kaldi_asr(std::string& /* _return */, const std::string& /* audio_file */) {
    return;
  }
};

typedef struct _KaldiService_kaldi_asr_args__isset {
  _KaldiService_kaldi_asr_args__isset() : audio_file(false) {}
  bool audio_file :1;
} _KaldiService_kaldi_asr_args__isset;

class KaldiService_kaldi_asr_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  KaldiService_kaldi_asr_args(const KaldiService_kaldi_asr_args&);
  KaldiService_kaldi_asr_args& operator=(const KaldiService_kaldi_asr_args&);
  KaldiService_kaldi_asr_args() : audio_file() {
  }

  virtual ~KaldiService_kaldi_asr_args() throw();
  std::string audio_file;

  _KaldiService_kaldi_asr_args__isset __isset;

  void __set_audio_file(const std::string& val);

  bool operator == (const KaldiService_kaldi_asr_args & rhs) const
  {
    if (!(audio_file == rhs.audio_file))
      return false;
    return true;
  }
  bool operator != (const KaldiService_kaldi_asr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KaldiService_kaldi_asr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KaldiService_kaldi_asr_args& obj);
};


class KaldiService_kaldi_asr_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~KaldiService_kaldi_asr_pargs() throw();
  const std::string* audio_file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KaldiService_kaldi_asr_pargs& obj);
};

typedef struct _KaldiService_kaldi_asr_result__isset {
  _KaldiService_kaldi_asr_result__isset() : success(false) {}
  bool success :1;
} _KaldiService_kaldi_asr_result__isset;

class KaldiService_kaldi_asr_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  KaldiService_kaldi_asr_result(const KaldiService_kaldi_asr_result&);
  KaldiService_kaldi_asr_result& operator=(const KaldiService_kaldi_asr_result&);
  KaldiService_kaldi_asr_result() : success() {
  }

  virtual ~KaldiService_kaldi_asr_result() throw();
  std::string success;

  _KaldiService_kaldi_asr_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const KaldiService_kaldi_asr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KaldiService_kaldi_asr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KaldiService_kaldi_asr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KaldiService_kaldi_asr_result& obj);
};

typedef struct _KaldiService_kaldi_asr_presult__isset {
  _KaldiService_kaldi_asr_presult__isset() : success(false) {}
  bool success :1;
} _KaldiService_kaldi_asr_presult__isset;

class KaldiService_kaldi_asr_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~KaldiService_kaldi_asr_presult() throw();
  std::string* success;

  _KaldiService_kaldi_asr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const KaldiService_kaldi_asr_presult& obj);
};

class KaldiServiceClient : virtual public KaldiServiceIf {
 public:
  KaldiServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  KaldiServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void kaldi_asr(std::string& _return, const std::string& audio_file);
  void send_kaldi_asr(const std::string& audio_file);
  void recv_kaldi_asr(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class KaldiServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<KaldiServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (KaldiServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_kaldi_asr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  KaldiServiceProcessor(boost::shared_ptr<KaldiServiceIf> iface) :
    iface_(iface) {
    processMap_["kaldi_asr"] = &KaldiServiceProcessor::process_kaldi_asr;
  }

  virtual ~KaldiServiceProcessor() {}
};

class KaldiServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  KaldiServiceProcessorFactory(const ::boost::shared_ptr< KaldiServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< KaldiServiceIfFactory > handlerFactory_;
};

class KaldiServiceMultiface : virtual public KaldiServiceIf {
 public:
  KaldiServiceMultiface(std::vector<boost::shared_ptr<KaldiServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~KaldiServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<KaldiServiceIf> > ifaces_;
  KaldiServiceMultiface() {}
  void add(boost::shared_ptr<KaldiServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void kaldi_asr(std::string& _return, const std::string& audio_file) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kaldi_asr(_return, audio_file);
    }
    ifaces_[i]->kaldi_asr(_return, audio_file);
    return;
  }

};



#endif

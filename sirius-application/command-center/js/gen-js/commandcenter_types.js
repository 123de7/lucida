//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


MachineData = function(args) {
  this.name = null;
  this.port = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.port !== undefined) {
      this.port = args.port;
    }
  }
};
MachineData.prototype = {};
MachineData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MachineData.prototype.write = function(output) {
  output.writeStructBegin('MachineData');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryData = function(args) {
  this.audioFile = '';
  this.textFile = '';
  this.imgFile = '';
  if (args) {
    if (args.audioFile !== undefined) {
      this.audioFile = args.audioFile;
    }
    if (args.textFile !== undefined) {
      this.textFile = args.textFile;
    }
    if (args.imgFile !== undefined) {
      this.imgFile = args.imgFile;
    }
  }
};
QueryData.prototype = {};
QueryData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.audioFile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.textFile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.imgFile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryData.prototype.write = function(output) {
  output.writeStructBegin('QueryData');
  if (this.audioFile !== null && this.audioFile !== undefined) {
    output.writeFieldBegin('audioFile', Thrift.Type.STRING, 1);
    output.writeString(this.audioFile);
    output.writeFieldEnd();
  }
  if (this.textFile !== null && this.textFile !== undefined) {
    output.writeFieldBegin('textFile', Thrift.Type.STRING, 2);
    output.writeString(this.textFile);
    output.writeFieldEnd();
  }
  if (this.imgFile !== null && this.imgFile !== undefined) {
    output.writeFieldBegin('imgFile', Thrift.Type.STRING, 3);
    output.writeString(this.imgFile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


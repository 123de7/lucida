<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="cont__ad_8h" kind="file">
    <compoundname>cont_ad.h</compoundname>
    <includes refid="sphinxbase__export_8h" local="no">sphinxbase/sphinxbase_export.h</includes>
    <includes refid="prim__type_8h" local="no">sphinxbase/prim_type.h</includes>
    <includes refid="ad_8h" local="no">sphinxbase/ad.h</includes>
    <includes local="no">stdio.h</includes>
    <includedby refid="cont__ad__base_8c" local="yes">src/libsphinxad/cont_ad_base.c</includedby>
    <includedby refid="cont__adseg_8c" local="no">src/sphinx_adtools/cont_adseg.c</includedby>
    <includedby refid="cont__fileseg_8c" local="no">src/sphinx_adtools/cont_fileseg.c</includedby>
    <incdepgraph>
      <node id="376">
        <label>sphinxbase/ad.h</label>
        <link refid="ad_8h"/>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="374" relation="include">
        </childnode>
      </node>
      <node id="375">
        <label>sphinx_config.h</label>
      </node>
      <node id="373">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="374">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="375" relation="include">
        </childnode>
      </node>
      <node id="372">
        <label>include/sphinxbase/cont_ad.h</label>
        <link refid="cont_ad.h"/>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
        <childnode refid="377" relation="include">
        </childnode>
      </node>
      <node id="377">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="380">
        <label>src/sphinx_adtools/cont_adseg.c</label>
        <link refid="cont__adseg_8c_source"/>
      </node>
      <node id="381">
        <label>src/sphinx_adtools/cont_fileseg.c</label>
        <link refid="cont__fileseg_8c_source"/>
      </node>
      <node id="378">
        <label>include/sphinxbase/cont_ad.h</label>
        <link refid="cont_ad.h"/>
        <childnode refid="379" relation="include">
        </childnode>
        <childnode refid="380" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
      </node>
      <node id="379">
        <label>src/libsphinxad/cont_ad_base.c</label>
        <link refid="cont__ad__base_8c_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structspseg__s" prot="public">spseg_s</innerclass>
    <innerclass refid="structcont__ad__t" prot="public">cont_ad_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="cont__ad_8h_1a2b7422b8273b64e5c9909f0d4ed2a109" prot="public" static="no">
        <name>CONT_AD_STATE_SIL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="126" column="9" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cont__ad_8h_1aa9664991fbf6001a8ee29e9be7dd667c" prot="public" static="no">
        <name>CONT_AD_STATE_SPEECH</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="127" column="9" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="cont__ad_8h_1a5153bcdd6b0bb75c8c37482a3c312c3d" prot="public" static="no">
        <type>struct <ref refid="structspseg__s" kindref="compound">spseg_s</ref></type>
        <definition>typedef struct spseg_s  spseg_t</definition>
        <argsstring></argsstring>
        <name>spseg_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="139" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cont__ad_8h_1af28bf56f17d5cfebf4d960ebed44ca64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT cont_ad_t* cont_ad_init</definition>
        <argsstring>(ad_rec_t *ad, int32(*adfunc)(ad_rec_t *ad, int16 *buf, int32 max))</argsstring>
        <name>cont_ad_init</name>
        <param>
          <type><ref refid="structad__rec__t" kindref="compound">ad_rec_t</ref> *</type>
          <declname>ad</declname>
          <briefdescription><para>In: The A/D source object to be filtered </para></briefdescription>
        </param>
        <param>
          <type>int32(*)(<ref refid="structad__rec__t" kindref="compound">ad_rec_t</ref> *ad, int16 *buf, int32 max)</type>
          <declname>adfunc</declname>
          <briefdescription><para>In: adfunc = source function to be invoked to obtain raw A/D data. See <ref refid="ad_8h" kindref="compound">ad.h</ref> for the required prototype definition. </para></briefdescription>
        </param>
        <briefdescription>
<para>Initialize a continuous listening/silence filtering object. </para>        </briefdescription>
        <detaileddescription>
<para>One time initialization of a continuous listening/silence filtering object/module. This can work in either &quot;stream mode&quot;, where it reads data from an audio device represented by <computeroutput><ref refid="structad__rec__t" kindref="compound">ad_rec_t</ref></computeroutput>, or in &quot;block mode&quot;, where it filters out silence regions from blocks of data passed into it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ad</parametername>
</parameternamelist>
<parameterdescription>
<para>An audio device to read from, or NULL to operate in block mode. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adfunc</parametername>
</parameternamelist>
<parameterdescription>
<para>The function used to read audio from <computeroutput>ad</computeroutput>, or NULL to operate in block mode. This is usually ad_read(). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a READ-ONLY structure used in other calls to the object. If any error occurs, the return value is NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1a1a9bbf961917827f5d03adcd409dda35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT cont_ad_t* cont_ad_init_rawmode</definition>
        <argsstring>(ad_rec_t *ad, int32(*adfunc)(ad_rec_t *ad, int16 *buf, int32 max))</argsstring>
        <name>cont_ad_init_rawmode</name>
        <param>
          <type><ref refid="structad__rec__t" kindref="compound">ad_rec_t</ref> *</type>
          <declname>ad</declname>
        </param>
        <param>
          <type>int32(*)(<ref refid="structad__rec__t" kindref="compound">ad_rec_t</ref> *ad, int16 *buf, int32 max)</type>
          <declname>adfunc</declname>
        </param>
        <briefdescription>
<para>Initializes a continuous listening object which simply passes data through (!) </para>        </briefdescription>
        <detaileddescription>
<para>Like cont_ad_init, but put the module in raw mode; i.e., all data is passed through, unfiltered. (By special request.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1ae664132adc514db01a1d5c1209ded4ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 cont_ad_read</definition>
        <argsstring>(cont_ad_t *r, int16 *buf, int32 max)</argsstring>
        <name>cont_ad_read</name>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>r</declname>
          <briefdescription><para>In: Object pointer returned by cont_ad_init </para></briefdescription>
        </param>
        <param>
          <type>int16 *</type>
          <declname>buf</declname>
          <briefdescription><para>In/Out: In block mode, contains input data. On return, buf contains A/D data returned by this function, if any. </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>max</declname>
          <briefdescription><para>In: Maximum number of samples to be filled into buf. NOTE: max must be at least 256; otherwise the functions returns -1. </para></briefdescription>
        </param>
        <briefdescription>
<para>Read raw audio data into the silence filter. </para>        </briefdescription>
        <detaileddescription>
<para>The main read routine for reading speech/silence segmented audio data. Audio data is copied into the caller provided buffer, much like a file read routine.</para><para>In &quot;block mode&quot;, i.e. if NULL was passed as a read function to <computeroutput>cont_ad_init</computeroutput>, the data in <computeroutput>buf</computeroutput> is taken as input, and any non-silence data is written back to <computeroutput>buf</computeroutput> on exit. In this case, you must take care that <computeroutput>max</computeroutput> does not overflow the internal buffer of the silence filter. The available number of samples can be obtained by calling <ref refid="cont__ad_8h_1a680721acc14ac191bbae3a4940ed357d" kindref="member">cont_ad_buffer_space()</ref>. Any excess data will be discarded.</para><para>In normal mode, only speech segments are copied; silence segments are dropped. In rawmode (cont_ad module initialized using <ref refid="cont__ad_8h_1a1a9bbf961917827f5d03adcd409dda35" kindref="member">cont_ad_init_rawmode()</ref>), all data are passed through to the caller. But, in either case, any single call to cont_ad_read will never return data that crosses a speech/silence segment boundary.</para><para>The following variables are updated for use by the caller (see <ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> above): <ref refid="structcont__ad__t_1a5d9420ea711733d1eea9b8f29a638fdb" kindref="member">cont_ad_t.state</ref>, <ref refid="structcont__ad__t_1a7b71e87abfcb3ca4ae73af34c86f955e" kindref="member">cont_ad_t.read_ts</ref>, <ref refid="structcont__ad__t_1a478939247e09a8ae142c8996ec17d8c8" kindref="member">cont_ad_t.seglen</ref>, <ref refid="structcont__ad__t_1a5524c052dcd0a3d1a1c3b1fc2134b62e" kindref="member">cont_ad_t.siglvl</ref>.</para><para>Return value: Number of samples actually read, possibly 0; &lt;0 if EOF on A/D source. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="303" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="863" bodyend="1015"/>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="121">E_ERROR</references>
        <references refid="structcont__ad__t_1af7b9044b76ed3b86ce74e4e7215ca4c3" compoundref="cont__ad_8h" startline="183">cont_ad_t::eof</references>
        <references refid="structcont__ad__t_1aa0617a92c549ac916258a54ec2cdc756" compoundref="cont__ad_8h" startline="188">cont_ad_t::headfrm</references>
        <references refid="structcont__ad__t_1a0d42e3ac6c1e5c59c86a40f4cf26a861" compoundref="cont__ad_8h" startline="205">cont_ad_t::leader</references>
        <references refid="structcont__ad__t_1adbbb6765386309476549beb058a235c5" compoundref="cont__ad_8h" startline="231">cont_ad_t::logfp</references>
        <references refid="structcont__ad__t_1abed5c6e9a2e078b70fc4c30b667612b2" compoundref="cont__ad_8h" startline="189">cont_ad_t::n_frm</references>
        <references refid="structcont__ad__t_1a628e5b444bde5e0eb0dc7fe8731a31a6" compoundref="cont__ad_8h" startline="222">cont_ad_t::n_other</references>
        <references refid="structcont__ad__t_1a7ae5362560d9edfa6c16555285487a7a" compoundref="cont__ad_8h" startline="190">cont_ad_t::n_sample</references>
        <references refid="structcont__ad__t_1a7726e8ea1bcca281a39c4b27bbb115e3" compoundref="cont__ad_8h" startline="156">cont_ad_t::rawmode</references>
        <references refid="structcont__ad__t_1a7b71e87abfcb3ca4ae73af34c86f955e" compoundref="cont__ad_8h" startline="167">cont_ad_t::read_ts</references>
        <references refid="structcont__ad__t_1a478939247e09a8ae142c8996ec17d8c8" compoundref="cont__ad_8h" startline="171">cont_ad_t::seglen</references>
        <references refid="structcont__ad__t_1a5524c052dcd0a3d1a1c3b1fc2134b62e" compoundref="cont__ad_8h" startline="175">cont_ad_t::siglvl</references>
        <references refid="structcont__ad__t_1a55f701abf33b5f68f9ef4cbf95dfaf73" compoundref="cont__ad_8h" startline="185">cont_ad_t::spf</references>
        <references refid="structcont__ad__t_1abffe61140bc2a02ae4222183b3ef6159" compoundref="cont__ad_8h" startline="224">cont_ad_t::spseg_head</references>
        <references refid="structcont__ad__t_1ac77e8f8bd27cea3b99238d9663455972" compoundref="cont__ad_8h" startline="225">cont_ad_t::spseg_tail</references>
        <references refid="structcont__ad__t_1a5d9420ea711733d1eea9b8f29a638fdb" compoundref="cont__ad_8h" startline="165">cont_ad_t::state</references>
        <references refid="structcont__ad__t_1ae52185e7f7dfe424060c0ff562a8858b" compoundref="cont__ad_8h" startline="217">cont_ad_t::tail_state</references>
        <references refid="structcont__ad__t_1a4ed32427e6a785b571b1346c85481899" compoundref="cont__ad_8h" startline="191">cont_ad_t::tot_frm</references>
        <references refid="structcont__ad__t_1a75bc7d23bfedfd79a2fd1e3ea2188e4c" compoundref="cont__ad_8h" startline="220">cont_ad_t::win_startfrm</references>
        <references refid="structcont__ad__t_1a14ee16922e7287ad4ce8c51c6ddb74fc" compoundref="cont__ad_8h" startline="221">cont_ad_t::win_validfrm</references>
        <references refid="structcont__ad__t_1a7c61513f48e8fbc9ab6b57db66dad7b9" compoundref="cont__ad_8h" startline="202">cont_ad_t::winsize</references>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1a680721acc14ac191bbae3a4940ed357d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 cont_ad_buffer_space</definition>
        <argsstring>(cont_ad_t *r)</argsstring>
        <name>cont_ad_buffer_space</name>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Get the maximum number of samples which can be passed into <ref refid="cont__ad_8h_1ae664132adc514db01a1d5c1209ded4ba" kindref="member">cont_ad_read()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="316" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="707" bodyend="710"/>
        <references refid="structcont__ad__t_1a5c6edc6be287f3ae013c59fef90cb4bd" compoundref="cont__ad_8h" startline="186">cont_ad_t::adbufsize</references>
        <references refid="structcont__ad__t_1a7ae5362560d9edfa6c16555285487a7a" compoundref="cont__ad_8h" startline="190">cont_ad_t::n_sample</references>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1a7a1d0eaf8292a4549b00a97163999321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 cont_ad_calib</definition>
        <argsstring>(cont_ad_t *cont)</argsstring>
        <name>cont_ad_calib</name>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>cont</declname>
          <briefdescription><para>In: object pointer returned by cont_ad_init </para></briefdescription>
        </param>
        <briefdescription>
<para>Calibrate the silence filter. </para>        </briefdescription>
        <detaileddescription>
<para>Calibration to determine an initial silence threshold. This function can be called any number of times. It should be called at least once immediately after cont_ad_init. The silence threshold is also updated internally once in a while, so this function only needs to be called in the middle if there is a definite change in the recording environment. The application is responsible for making sure that the raw audio source is turned on before the calibration. Return value: 0 if successful, &lt;0 otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="331" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="1022" bodyend="1055"/>
        <references refid="structcont__ad__t_1aae5b9d977e62424b0cf0e245485b20a0" compoundref="cont__ad_8h" startline="154">cont_ad_t::ad</references>
        <references refid="structcont__ad__t_1a719f5c6816cd0da0a31930a2e572b933" compoundref="cont__ad_8h" startline="158">cont_ad_t::adbuf</references>
        <references refid="structcont__ad__t_1aa0617a92c549ac916258a54ec2cdc756" compoundref="cont__ad_8h" startline="188">cont_ad_t::headfrm</references>
        <references refid="structcont__ad__t_1ac6e6809727ddc78a13674478d5b527db" compoundref="cont__ad_8h" startline="236">cont_ad_t::n_calib_frame</references>
        <references refid="structcont__ad__t_1abed5c6e9a2e078b70fc4c30b667612b2" compoundref="cont__ad_8h" startline="189">cont_ad_t::n_frm</references>
        <references refid="structcont__ad__t_1a01f61a105019bea12533db84351d07b9" compoundref="cont__ad_8h" startline="194">cont_ad_t::pow_hist</references>
        <references refid="structcont__ad__t_1a55f701abf33b5f68f9ef4cbf95dfaf73" compoundref="cont__ad_8h" startline="185">cont_ad_t::spf</references>
        <references refid="structcont__ad__t_1a2168183b25add085cf3aa29ddab1c8ce" compoundref="cont__ad_8h" startline="212">cont_ad_t::thresh_update</references>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1a8a575044cf22d96a5ec8fb20410b0065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 cont_ad_calib_loop</definition>
        <argsstring>(cont_ad_t *r, int16 *buf, int32 max)</argsstring>
        <name>cont_ad_calib_loop</name>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int16 *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Calibrate the silence filter without an audio device. </para>        </briefdescription>
        <detaileddescription>
<para>If the application has not passed an audio device into the silence filter at initialisation, this routine can be used to calibrate the filter. The buf (of length max samples) should contain audio data for calibration. This data is assumed to be completely consumed. More than one call may be necessary to fully calibrate. Return value: 0 if successful, &lt;0 on failure, &gt;0 if calibration not complete. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="346" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="1064" bodyend="1095"/>
        <references refid="structcont__ad__t_1a719f5c6816cd0da0a31930a2e572b933" compoundref="cont__ad_8h" startline="158">cont_ad_t::adbuf</references>
        <references refid="structcont__ad__t_1aa0617a92c549ac916258a54ec2cdc756" compoundref="cont__ad_8h" startline="188">cont_ad_t::headfrm</references>
        <references refid="structcont__ad__t_1ac6e6809727ddc78a13674478d5b527db" compoundref="cont__ad_8h" startline="236">cont_ad_t::n_calib_frame</references>
        <references refid="structcont__ad__t_1abed5c6e9a2e078b70fc4c30b667612b2" compoundref="cont__ad_8h" startline="189">cont_ad_t::n_frm</references>
        <references refid="structcont__ad__t_1a01f61a105019bea12533db84351d07b9" compoundref="cont__ad_8h" startline="194">cont_ad_t::pow_hist</references>
        <references refid="structcont__ad__t_1a55f701abf33b5f68f9ef4cbf95dfaf73" compoundref="cont__ad_8h" startline="185">cont_ad_t::spf</references>
        <references refid="structcont__ad__t_1a2168183b25add085cf3aa29ddab1c8ce" compoundref="cont__ad_8h" startline="212">cont_ad_t::thresh_update</references>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1a6a86e16fb673748be753e2a281ce837a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 cont_ad_calib_size</definition>
        <argsstring>(cont_ad_t *r)</argsstring>
        <name>cont_ad_calib_size</name>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Get the number of samples required to calibrate the silence filter. </para>        </briefdescription>
        <detaileddescription>
<para>Since, as mentioned above, the calibration data is assumed to be fully consumed, it may be desirable to &quot;hold onto&quot; this data in case it contains useful speech. This function returns the number of samples required to calibrate the silence filter, which is useful in allocating a buffer to store this data.</para><para><simplesect kind="return"><para>Number of samples required for successful calibration. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="360" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="1058" bodyend="1061"/>
        <references refid="structcont__ad__t_1a55f701abf33b5f68f9ef4cbf95dfaf73" compoundref="cont__ad_8h" startline="185">cont_ad_t::spf</references>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1af9a8f9f66bbfd1ce48fe9366fafcc40d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 cont_ad_set_thresh</definition>
        <argsstring>(cont_ad_t *cont, int32 sil, int32 sp)</argsstring>
        <name>cont_ad_set_thresh</name>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>cont</declname>
          <briefdescription><para>In: Object ptr from cont_ad_init </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>sil</declname>
          <briefdescription><para>In: silence threshold (default 2) </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>sp</declname>
          <briefdescription><para>In: speech threshold (default 2) </para></briefdescription>
        </param>
        <briefdescription>
<para>Set silence and speech threshold parameters. </para>        </briefdescription>
        <detaileddescription>
<para>The silence threshold is the max power level, RELATIVE to the peak background noise level, in any silence frame. Similarly, the speech threshold is the min power level, RELATIVE to the peak background noise level, in any speech frame. In general, silence threshold &lt;= speech threshold. Increasing the thresholds (say, from the default value of 2 to 3 or 4) reduces the sensitivity to background noise, but may also increase the chances of clipping actual speech. <simplesect kind="return"><para>: 0 if successful, &lt;0 otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="375" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="1100" bodyend="1115"/>
        <references refid="structcont__ad__t_1a74a6f56fb4cbde7fc789c9b463cf2f8f" compoundref="cont__ad_8h" startline="198">cont_ad_t::delta_sil</references>
        <references refid="structcont__ad__t_1afca0f69a21d9f28c9610fcefc0e7cb10" compoundref="cont__ad_8h" startline="199">cont_ad_t::delta_speech</references>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1aa402397c575922ea352afe5e66c02a34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 cont_ad_set_params</definition>
        <argsstring>(cont_ad_t *r, int32 delta_sil, int32 delta_speech, int32 min_noise, int32 max_noise, int32 winsize, int32 speech_onset, int32 sil_onset, int32 leader, int32 trailer, float32 adapt_rate)</argsstring>
        <name>cont_ad_set_params</name>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>delta_sil</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>delta_speech</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>min_noise</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>max_noise</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>winsize</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>speech_onset</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>sil_onset</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>leader</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>trailer</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>adapt_rate</declname>
        </param>
        <briefdescription>
<para>Set the changable parameters. </para>        </briefdescription>
        <detaileddescription>
<para>delta_sil, delta_speech, min_noise, and max_noise are in dB, winsize, speech_onset, sil_onset, leader and trailer are in frames of 16 ms length (256 samples @ 16kHz sampling). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="389" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="1126" bodyend="1188"/>
        <references refid="structcont__ad__t_1ac22395096037175bf9a0a1f6877e5ec5" compoundref="cont__ad_8h" startline="213">cont_ad_t::adapt_rate</references>
        <references refid="structcont__ad__t_1a74a6f56fb4cbde7fc789c9b463cf2f8f" compoundref="cont__ad_8h" startline="198">cont_ad_t::delta_sil</references>
        <references refid="structcont__ad__t_1afca0f69a21d9f28c9610fcefc0e7cb10" compoundref="cont__ad_8h" startline="199">cont_ad_t::delta_speech</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="121">E_ERROR</references>
        <references refid="structcont__ad__t_1a0d42e3ac6c1e5c59c86a40f4cf26a861" compoundref="cont__ad_8h" startline="205">cont_ad_t::leader</references>
        <references refid="structcont__ad__t_1af3b50663565964bb18ebb9f9e0002421" compoundref="cont__ad_8h" startline="201">cont_ad_t::max_noise</references>
        <references refid="structcont__ad__t_1ac301114b24356aef2edccba155e3cf33" compoundref="cont__ad_8h" startline="200">cont_ad_t::min_noise</references>
        <references refid="structcont__ad__t_1a9f5e138f4b79b59bf4daa5603d171165" compoundref="cont__ad_8h" startline="204">cont_ad_t::sil_onset</references>
        <references refid="structcont__ad__t_1a1b0bb7e53a2bf537ed362badddca341b" compoundref="cont__ad_8h" startline="203">cont_ad_t::speech_onset</references>
        <references refid="structcont__ad__t_1aa15db1e9fbb0048225521555ab8d9388" compoundref="cont__ad_8h" startline="206">cont_ad_t::trailer</references>
        <references refid="structcont__ad__t_1a14ee16922e7287ad4ce8c51c6ddb74fc" compoundref="cont__ad_8h" startline="221">cont_ad_t::win_validfrm</references>
        <references refid="structcont__ad__t_1a7c61513f48e8fbc9ab6b57db66dad7b9" compoundref="cont__ad_8h" startline="202">cont_ad_t::winsize</references>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1aedd013bc2c6aca14fba02049ed7645d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 cont_ad_get_params</definition>
        <argsstring>(cont_ad_t *r, int32 *delta_sil, int32 *delta_speech, int32 *min_noise, int32 *max_noise, int32 *winsize, int32 *speech_onset, int32 *sil_onset, int32 *leader, int32 *trailer, float32 *adapt_rate)</argsstring>
        <name>cont_ad_get_params</name>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>delta_sil</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>delta_speech</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>min_noise</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>max_noise</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>winsize</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>speech_onset</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>sil_onset</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>leader</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>trailer</declname>
        </param>
        <param>
          <type>float32 *</type>
          <declname>adapt_rate</declname>
        </param>
        <briefdescription>
<para>PWP 1/14/98 <ndash/> get the changable params. </para>        </briefdescription>
        <detaileddescription>
<para>delta_sil, delta_speech, min_noise, and max_noise are in dB, winsize, speech_onset, sil_onset, leader and trailer are in frames of 16 ms length (256 samples @ 16kHz sampling). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="403" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="1199" bodyend="1229"/>
        <references refid="structcont__ad__t_1ac22395096037175bf9a0a1f6877e5ec5" compoundref="cont__ad_8h" startline="213">cont_ad_t::adapt_rate</references>
        <references refid="structcont__ad__t_1a74a6f56fb4cbde7fc789c9b463cf2f8f" compoundref="cont__ad_8h" startline="198">cont_ad_t::delta_sil</references>
        <references refid="structcont__ad__t_1afca0f69a21d9f28c9610fcefc0e7cb10" compoundref="cont__ad_8h" startline="199">cont_ad_t::delta_speech</references>
        <references refid="structcont__ad__t_1a0d42e3ac6c1e5c59c86a40f4cf26a861" compoundref="cont__ad_8h" startline="205">cont_ad_t::leader</references>
        <references refid="structcont__ad__t_1af3b50663565964bb18ebb9f9e0002421" compoundref="cont__ad_8h" startline="201">cont_ad_t::max_noise</references>
        <references refid="structcont__ad__t_1ac301114b24356aef2edccba155e3cf33" compoundref="cont__ad_8h" startline="200">cont_ad_t::min_noise</references>
        <references refid="structcont__ad__t_1a9f5e138f4b79b59bf4daa5603d171165" compoundref="cont__ad_8h" startline="204">cont_ad_t::sil_onset</references>
        <references refid="structcont__ad__t_1a1b0bb7e53a2bf537ed362badddca341b" compoundref="cont__ad_8h" startline="203">cont_ad_t::speech_onset</references>
        <references refid="structcont__ad__t_1aa15db1e9fbb0048225521555ab8d9388" compoundref="cont__ad_8h" startline="206">cont_ad_t::trailer</references>
        <references refid="structcont__ad__t_1a7c61513f48e8fbc9ab6b57db66dad7b9" compoundref="cont__ad_8h" startline="202">cont_ad_t::winsize</references>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1a12a017ea8a96dc54445e937bb9de24ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 cont_ad_reset</definition>
        <argsstring>(cont_ad_t *cont)</argsstring>
        <name>cont_ad_reset</name>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
<para>Reset, discarding any accumulated speech segments. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 if successful, &lt;0 otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="414" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="1236" bodyend="1260"/>
        <references refid="structcont__ad__t_1aa0617a92c549ac916258a54ec2cdc756" compoundref="cont__ad_8h" startline="188">cont_ad_t::headfrm</references>
        <references refid="structcont__ad__t_1abed5c6e9a2e078b70fc4c30b667612b2" compoundref="cont__ad_8h" startline="189">cont_ad_t::n_frm</references>
        <references refid="structcont__ad__t_1a628e5b444bde5e0eb0dc7fe8731a31a6" compoundref="cont__ad_8h" startline="222">cont_ad_t::n_other</references>
        <references refid="structcont__ad__t_1a7ae5362560d9edfa6c16555285487a7a" compoundref="cont__ad_8h" startline="190">cont_ad_t::n_sample</references>
        <references refid="structcont__ad__t_1abffe61140bc2a02ae4222183b3ef6159" compoundref="cont__ad_8h" startline="224">cont_ad_t::spseg_head</references>
        <references refid="structcont__ad__t_1ac77e8f8bd27cea3b99238d9663455972" compoundref="cont__ad_8h" startline="225">cont_ad_t::spseg_tail</references>
        <references refid="structcont__ad__t_1ae52185e7f7dfe424060c0ff562a8858b" compoundref="cont__ad_8h" startline="217">cont_ad_t::tail_state</references>
        <references refid="structcont__ad__t_1a75bc7d23bfedfd79a2fd1e3ea2188e4c" compoundref="cont__ad_8h" startline="220">cont_ad_t::win_startfrm</references>
        <references refid="structcont__ad__t_1a14ee16922e7287ad4ce8c51c6ddb74fc" compoundref="cont__ad_8h" startline="221">cont_ad_t::win_validfrm</references>
        <referencedby refid="cont__ad_8h_1a381c3df971d43a20e8e8b8da43d2872d" compoundref="cont__ad__base_8c" startline="1264" endline="1277">cont_ad_close</referencedby>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1a381c3df971d43a20e8e8b8da43d2872d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 cont_ad_close</definition>
        <argsstring>(cont_ad_t *cont)</argsstring>
        <name>cont_ad_close</name>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
<para>Close the continuous listening object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="421" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="1264" bodyend="1277"/>
        <references refid="cont__ad_8h_1a12a017ea8a96dc54445e937bb9de24ae" compoundref="cont__ad__base_8c" startline="1236" endline="1260">cont_ad_reset</references>
        <references refid="structcont__ad__t_1a719f5c6816cd0da0a31930a2e572b933" compoundref="cont__ad_8h" startline="158">cont_ad_t::adbuf</references>
        <references refid="structcont__ad__t_1a01f61a105019bea12533db84351d07b9" compoundref="cont__ad_8h" startline="194">cont_ad_t::pow_hist</references>
        <references refid="structcont__ad__t_1a18f146239c77ff4ca6157261acdf4083" compoundref="cont__ad_8h" startline="195">cont_ad_t::frm_pow</references>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1a288394cd94a4992bec9d3911cc875767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void cont_ad_powhist_dump</definition>
        <argsstring>(FILE *fp, cont_ad_t *cont)</argsstring>
        <name>cont_ad_powhist_dump</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
<para>Dump the power histogram. </para>        </briefdescription>
        <detaileddescription>
<para>For debugging... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="428" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="231" bodyend="250"/>
        <references refid="structcont__ad__t_1a01f61a105019bea12533db84351d07b9" compoundref="cont__ad_8h" startline="194">cont_ad_t::pow_hist</references>
        <references refid="structcont__ad__t_1a55f701abf33b5f68f9ef4cbf95dfaf73" compoundref="cont__ad_8h" startline="185">cont_ad_t::spf</references>
        <references refid="structcont__ad__t_1a11a4bb48870007b39f8fa46e4b8f111a" compoundref="cont__ad_8h" startline="180">cont_ad_t::sps</references>
        <references refid="structcont__ad__t_1a4ed32427e6a785b571b1346c85481899" compoundref="cont__ad_8h" startline="191">cont_ad_t::tot_frm</references>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1a8f8284f329d1c0e04856ec9d13020dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 cont_ad_detach</definition>
        <argsstring>(cont_ad_t *c)</argsstring>
        <name>cont_ad_detach</name>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Detach the given continuous listening module from the associated audio device. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 if successful, -1 otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="436" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="1281" bodyend="1289"/>
        <references refid="structcont__ad__t_1aae5b9d977e62424b0cf0e245485b20a0" compoundref="cont__ad_8h" startline="154">cont_ad_t::ad</references>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1a41e7f8c5925dba26dd51e8f7a3d16404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 cont_ad_attach</definition>
        <argsstring>(cont_ad_t *c, ad_rec_t *a, int32(*func)(ad_rec_t *, int16 *, int32))</argsstring>
        <name>cont_ad_attach</name>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="structad__rec__t" kindref="compound">ad_rec_t</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int32(*)(<ref refid="structad__rec__t" kindref="compound">ad_rec_t</ref> *, int16 *, int32)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Attach the continuous listening module to the given audio device/function. </para>        </briefdescription>
        <detaileddescription>
<para>(Like cont_ad_init, but without the calibration.) <simplesect kind="return"><para>0 if successful, -1 otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="445" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="1293" bodyend="1304"/>
        <references refid="structcont__ad__t_1aae5b9d977e62424b0cf0e245485b20a0" compoundref="cont__ad_8h" startline="154">cont_ad_t::ad</references>
        <references refid="structcont__ad__t_1af7b9044b76ed3b86ce74e4e7215ca4c3" compoundref="cont__ad_8h" startline="183">cont_ad_t::eof</references>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1a662ed7c409479060e3b5ac8eb7bd1865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 cont_ad_set_rawfp</definition>
        <argsstring>(cont_ad_t *c, FILE *fp)</argsstring>
        <name>cont_ad_set_rawfp</name>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
<para>Set a file for dumping raw audio input. </para>        </briefdescription>
        <detaileddescription>
<para>The application can ask cont_ad to dump the raw audio input that cont_ad processes to a file. Use this function to give the FILE* to the cont_ad object. If invoked with fp == NULL, dumping is turned off. The application is responsible for opening and closing the file. If fp is non-NULL, cont_ad assumes the file pointer is valid and opened for writing.</para><para><simplesect kind="return"><para>0 if successful, -1 otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="460" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="1346" bodyend="1353"/>
        <references refid="structcont__ad__t_1af8cd2a7e0ef0f4e2c825c7812a091f9c" compoundref="cont__ad_8h" startline="227">cont_ad_t::rawfp</references>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1a16c5810eb19ed89522ef4c3394bbfe83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 cont_ad_set_logfp</definition>
        <argsstring>(cont_ad_t *c, FILE *fp)</argsstring>
        <name>cont_ad_set_logfp</name>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
<para>Set the file to which cont_ad logs its progress. </para>        </briefdescription>
        <detaileddescription>
<para>Mainly for debugging. If <computeroutput>fp</computeroutput> is NULL, logging is turned off.</para><para><simplesect kind="return"><para>0 if successful, -1 otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="472" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="1360" bodyend="1367"/>
        <references refid="structcont__ad__t_1adbbb6765386309476549beb058a235c5" compoundref="cont__ad_8h" startline="231">cont_ad_t::logfp</references>
      </memberdef>
      <memberdef kind="function" id="cont__ad_8h_1a382fe6375eae57a532c524d68bc3dd24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 cont_set_thresh</definition>
        <argsstring>(cont_ad_t *r, int32 silence, int32 speech)</argsstring>
        <name>cont_set_thresh</name>
        <param>
          <type><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>silence</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>speech</declname>
        </param>
        <briefdescription>
<para>Set the silence and speech thresholds. </para>        </briefdescription>
        <detaileddescription>
<para>For this to remain permanently in effect, the auto_thresh field of the continuous listening module should be set to FALSE or 0. Otherwise the thresholds may be modified by the noise- level adaptation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h" line="485" column="1" bodyfile="/home/gpuser/cmusphinx-code/sphinxbase/src/libsphinxad/cont_ad_base.c" bodystart="1308" bodyend="1339"/>
        <references refid="structcont__ad__t_1a18f146239c77ff4ca6157261acdf4083" compoundref="cont__ad_8h" startline="195">cont_ad_t::frm_pow</references>
        <references refid="structcont__ad__t_1a628e5b444bde5e0eb0dc7fe8731a31a6" compoundref="cont__ad_8h" startline="222">cont_ad_t::n_other</references>
        <references refid="structcont__ad__t_1ae52185e7f7dfe424060c0ff562a8858b" compoundref="cont__ad_8h" startline="217">cont_ad_t::tail_state</references>
        <references refid="structcont__ad__t_1adbbe28dca87d06a3ca8d2390d08ea83a" compoundref="cont__ad_8h" startline="210">cont_ad_t::thresh_sil</references>
        <references refid="structcont__ad__t_1a0b9333d9acc41b5bfb67f69fc22ca901" compoundref="cont__ad_8h" startline="208">cont_ad_t::thresh_speech</references>
        <references refid="structcont__ad__t_1a75bc7d23bfedfd79a2fd1e3ea2188e4c" compoundref="cont__ad_8h" startline="220">cont_ad_t::win_startfrm</references>
        <references refid="structcont__ad__t_1a14ee16922e7287ad4ce8c51c6ddb74fc" compoundref="cont__ad_8h" startline="221">cont_ad_t::win_validfrm</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Continuous A/D listening and silence filtering module. </para>    </briefdescription>
    <detaileddescription>
<para>This module is intended to be interposed as a filter between any raw A/D source and the application to remove silence regions. Its main purpose is to remove regions of silence from the raw input speech. It is initialized with a raw A/D source function (during the cont_ad_init call). The application is responsible for setting up the A/D source, turning recording on and off as it desires. Filtered A/D data can be read by the application using the cont_ad_read function.</para><para>In other words, the application calls cont_ad_read instead of the raw A/D source function (e.g., ad_read in libad) to obtain filtered A/D data with silence regions removed. This module itself does not enforce any other structural changes to the application.</para><para>The cont_ad_read function also updates an &quot;absolute&quot; timestamp (see <ref refid="structcont__ad__t_1a7b71e87abfcb3ca4ae73af34c86f955e" kindref="member">cont_ad_t.read_ts</ref>) at the end of each invocation. The timestamp indicates the total number of samples of A/D data read until this point, including data discarded as silence frames. The application is responsible for using this timestamp to make any policy decisions regarding utterance boundaries or whatever. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2001<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>cont_ad.h<sp/>--<sp/>Continuous<sp/>A/D<sp/>listening<sp/>and<sp/>silence<sp/>filtering<sp/>module.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>**********************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>CMU<sp/>ARPA<sp/>Speech<sp/>Project</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1996<sp/>Carnegie<sp/>Mellon<sp/>University.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>ALL<sp/>RIGHTS<sp/>RESERVED.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>**********************************************</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>HISTORY</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>13-Jul-98<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>spf<sp/>and<sp/>adbufsize<sp/>to<sp/>cont_ad_t<sp/>in<sp/>order<sp/>to<sp/>support<sp/>variable</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame<sp/>sizes<sp/>depending<sp/>on<sp/>audio<sp/>sampling<sp/>rate.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>30-Jun-98<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>FILE*<sp/>argument<sp/>to<sp/>cont_ad_powhist_dump().</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>16-Jan-98<sp/><sp/><sp/><sp/>Paul<sp/>Placeway<sp/>(pwp@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Changed<sp/>to<sp/>use<sp/>dB<sp/>instead<sp/>of<sp/>the<sp/>weird<sp/>power<sp/>measure.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>most<sp/>system<sp/>parameters<sp/>to<sp/>cont_ad_t<sp/>instead<sp/>of<sp/>hardwiring</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>them<sp/>in<sp/>cont_ad.c.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>cont_ad_set_params()<sp/>and<sp/>cont_ad_get_params().</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>28-Jul-96<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>cont_ad_t.siglvl.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>27-Jun-96<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>the<sp/>option<sp/>for<sp/>cont_ad_read<sp/>to<sp/>return<sp/>-1<sp/>on<sp/>EOF.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>21-Jun-96<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>cont_ad_set_thresh().</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>20-Jun-96<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Separated<sp/>thresholds<sp/>for<sp/>speech<sp/>and<sp/>silence.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>17-Jun-96<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Created,<sp/>based<sp/>loosely<sp/>on<sp/>Steve<sp/>Reed&apos;s<sp/>original<sp/>implementation.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_CONT_AD_H_</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_CONT_AD_H_</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Win32/WinCE<sp/>DLL<sp/>gunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/sphinxbase_export.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prim__type_8h" kindref="compound">sphinxbase/prim_type.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ad_8h" kindref="compound">sphinxbase/ad.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Fool<sp/>Emacs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>States<sp/>of<sp/>continuous<sp/>listening<sp/>module<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CONT_AD_STATE_SIL<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CONT_AD_STATE_SPEECH<sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="structspseg__s" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspseg__s" kindref="compound">spseg_s</ref><sp/>{</highlight></codeline>
<codeline lineno="136" refid="structspseg__s_1a0f62769ff904df2d374b9500a210374f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structspseg__s_1a0f62769ff904df2d374b9500a210374f" kindref="member">startfrm</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137" refid="structspseg__s_1a91271dd1e4a57bfe1c468e216f7dd42f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structspseg__s_1a91271dd1e4a57bfe1c468e216f7dd42f" kindref="member">nfrm</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138" refid="structspseg__s_1aec01e1c543395710d3510e18f0938b1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspseg__s" kindref="compound">spseg_s</ref><sp/>*<ref refid="structspseg__s_1aec01e1c543395710d3510e18f0938b1a" kindref="member">next</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal">}<sp/><ref refid="structspseg__t" kindref="compound">spseg_t</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="structcont__ad__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Function<sp/>to<sp/>be<sp/>called<sp/>for<sp/>obtaining<sp/>A/D<sp/>data<sp/>(see<sp/>prototype<sp/>for<sp/>ad_read<sp/>in<sp/>ad.h)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>(*adfunc)(<ref refid="structad__rec__t" kindref="compound">ad_rec_t</ref><sp/>*ad,<sp/>int16<sp/>*buf,<sp/>int32<sp/>max);</highlight></codeline>
<codeline lineno="154" refid="structcont__ad__t_1aae5b9d977e62424b0cf0e245485b20a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structad__rec__t" kindref="compound">ad_rec_t</ref><sp/>*<ref refid="structcont__ad__t_1aae5b9d977e62424b0cf0e245485b20a0" kindref="member">ad</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156" refid="structcont__ad__t_1a7726e8ea1bcca281a39c4b27bbb115e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a7726e8ea1bcca281a39c4b27bbb115e3" kindref="member">rawmode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="158" refid="structcont__ad__t_1a719f5c6816cd0da0a31930a2e572b933" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int16<sp/>*<ref refid="structcont__ad__t_1a719f5c6816cd0da0a31930a2e572b933" kindref="member">adbuf</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>**************************************************************************</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>state,<sp/>read_ts,<sp/>and<sp/>siglvl<sp/>are<sp/>provided<sp/>for<sp/>READ-ONLY<sp/>use<sp/>by<sp/>client</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>applications,<sp/>and<sp/>are<sp/>updated<sp/>by<sp/>calls<sp/>to<sp/>cont_ad_read()<sp/>(see<sp/>below).<sp/><sp/>All</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>other<sp/>variables<sp/>should<sp/>be<sp/>left<sp/>alone.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="structcont__ad__t_1a5d9420ea711733d1eea9b8f29a638fdb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a5d9420ea711733d1eea9b8f29a638fdb" kindref="member">state</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167" refid="structcont__ad__t_1a7b71e87abfcb3ca4ae73af34c86f955e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a7b71e87abfcb3ca4ae73af34c86f955e" kindref="member">read_ts</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="171" refid="structcont__ad__t_1a478939247e09a8ae142c8996ec17d8c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a478939247e09a8ae142c8996ec17d8c8" kindref="member">seglen</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="175" refid="structcont__ad__t_1a5524c052dcd0a3d1a1c3b1fc2134b62e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a5524c052dcd0a3d1a1c3b1fc2134b62e" kindref="member">siglvl</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>************************************************************************<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="180" refid="structcont__ad__t_1a11a4bb48870007b39f8fa46e4b8f111a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a11a4bb48870007b39f8fa46e4b8f111a" kindref="member">sps</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="183" refid="structcont__ad__t_1af7b9044b76ed3b86ce74e4e7215ca4c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1af7b9044b76ed3b86ce74e4e7215ca4c3" kindref="member">eof</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185" refid="structcont__ad__t_1a55f701abf33b5f68f9ef4cbf95dfaf73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a55f701abf33b5f68f9ef4cbf95dfaf73" kindref="member">spf</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="186" refid="structcont__ad__t_1a5c6edc6be287f3ae013c59fef90cb4bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a5c6edc6be287f3ae013c59fef90cb4bd" kindref="member">adbufsize</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="187" refid="structcont__ad__t_1a54e2013d9634ec473aaf79a606fb2e0f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a54e2013d9634ec473aaf79a606fb2e0f" kindref="member">prev_sample</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="188" refid="structcont__ad__t_1aa0617a92c549ac916258a54ec2cdc756" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1aa0617a92c549ac916258a54ec2cdc756" kindref="member">headfrm</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="189" refid="structcont__ad__t_1abed5c6e9a2e078b70fc4c30b667612b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1abed5c6e9a2e078b70fc4c30b667612b2" kindref="member">n_frm</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="190" refid="structcont__ad__t_1a7ae5362560d9edfa6c16555285487a7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a7ae5362560d9edfa6c16555285487a7a" kindref="member">n_sample</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="191" refid="structcont__ad__t_1a4ed32427e6a785b571b1346c85481899" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a4ed32427e6a785b571b1346c85481899" kindref="member">tot_frm</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="192" refid="structcont__ad__t_1af60b0f78f9959a25cf7e7bf4c4aab4d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1af60b0f78f9959a25cf7e7bf4c4aab4d7" kindref="member">noise_level</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="194" refid="structcont__ad__t_1a01f61a105019bea12533db84351d07b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>*<ref refid="structcont__ad__t_1a01f61a105019bea12533db84351d07b9" kindref="member">pow_hist</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195" refid="structcont__ad__t_1a18f146239c77ff4ca6157261acdf4083" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structcont__ad__t_1a18f146239c77ff4ca6157261acdf4083" kindref="member">frm_pow</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="197" refid="structcont__ad__t_1a9e23379bf649ee06ece20133316253e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a9e23379bf649ee06ece20133316253e5" kindref="member">auto_thresh</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="198" refid="structcont__ad__t_1a74a6f56fb4cbde7fc789c9b463cf2f8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a74a6f56fb4cbde7fc789c9b463cf2f8f" kindref="member">delta_sil</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199" refid="structcont__ad__t_1afca0f69a21d9f28c9610fcefc0e7cb10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1afca0f69a21d9f28c9610fcefc0e7cb10" kindref="member">delta_speech</ref>;<sp/></highlight></codeline>
<codeline lineno="200" refid="structcont__ad__t_1ac301114b24356aef2edccba155e3cf33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1ac301114b24356aef2edccba155e3cf33" kindref="member">min_noise</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="201" refid="structcont__ad__t_1af3b50663565964bb18ebb9f9e0002421" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1af3b50663565964bb18ebb9f9e0002421" kindref="member">max_noise</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="202" refid="structcont__ad__t_1a7c61513f48e8fbc9ab6b57db66dad7b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a7c61513f48e8fbc9ab6b57db66dad7b9" kindref="member">winsize</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="203" refid="structcont__ad__t_1a1b0bb7e53a2bf537ed362badddca341b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a1b0bb7e53a2bf537ed362badddca341b" kindref="member">speech_onset</ref>;<sp/></highlight></codeline>
<codeline lineno="204" refid="structcont__ad__t_1a9f5e138f4b79b59bf4daa5603d171165" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a9f5e138f4b79b59bf4daa5603d171165" kindref="member">sil_onset</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="205" refid="structcont__ad__t_1a0d42e3ac6c1e5c59c86a40f4cf26a861" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a0d42e3ac6c1e5c59c86a40f4cf26a861" kindref="member">leader</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206" refid="structcont__ad__t_1aa15db1e9fbb0048225521555ab8d9388" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1aa15db1e9fbb0048225521555ab8d9388" kindref="member">trailer</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="208" refid="structcont__ad__t_1a0b9333d9acc41b5bfb67f69fc22ca901" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a0b9333d9acc41b5bfb67f69fc22ca901" kindref="member">thresh_speech</ref>;</highlight></codeline>
<codeline lineno="210" refid="structcont__ad__t_1adbbe28dca87d06a3ca8d2390d08ea83a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1adbbe28dca87d06a3ca8d2390d08ea83a" kindref="member">thresh_sil</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="212" refid="structcont__ad__t_1a2168183b25add085cf3aa29ddab1c8ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a2168183b25add085cf3aa29ddab1c8ce" kindref="member">thresh_update</ref>;</highlight></codeline>
<codeline lineno="213" refid="structcont__ad__t_1ac22395096037175bf9a0a1f6877e5ec5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>float32<sp/><ref refid="structcont__ad__t_1ac22395096037175bf9a0a1f6877e5ec5" kindref="member">adapt_rate</ref>;<sp/></highlight></codeline>
<codeline lineno="217" refid="structcont__ad__t_1ae52185e7f7dfe424060c0ff562a8858b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1ae52185e7f7dfe424060c0ff562a8858b" kindref="member">tail_state</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="220" refid="structcont__ad__t_1a75bc7d23bfedfd79a2fd1e3ea2188e4c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a75bc7d23bfedfd79a2fd1e3ea2188e4c" kindref="member">win_startfrm</ref>;<sp/></highlight></codeline>
<codeline lineno="221" refid="structcont__ad__t_1a14ee16922e7287ad4ce8c51c6ddb74fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a14ee16922e7287ad4ce8c51c6ddb74fc" kindref="member">win_validfrm</ref>;<sp/></highlight></codeline>
<codeline lineno="222" refid="structcont__ad__t_1a628e5b444bde5e0eb0dc7fe8731a31a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1a628e5b444bde5e0eb0dc7fe8731a31a6" kindref="member">n_other</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="224" refid="structcont__ad__t_1abffe61140bc2a02ae4222183b3ef6159" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspseg__t" kindref="compound">spseg_t</ref><sp/>*<ref refid="structcont__ad__t_1abffe61140bc2a02ae4222183b3ef6159" kindref="member">spseg_head</ref>;</highlight></codeline>
<codeline lineno="225" refid="structcont__ad__t_1ac77e8f8bd27cea3b99238d9663455972" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspseg__t" kindref="compound">spseg_t</ref><sp/>*<ref refid="structcont__ad__t_1ac77e8f8bd27cea3b99238d9663455972" kindref="member">spseg_tail</ref>;</highlight></codeline>
<codeline lineno="227" refid="structcont__ad__t_1af8cd2a7e0ef0f4e2c825c7812a091f9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*<ref refid="structcont__ad__t_1af8cd2a7e0ef0f4e2c825c7812a091f9c" kindref="member">rawfp</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="231" refid="structcont__ad__t_1adbbb6765386309476549beb058a235c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*<ref refid="structcont__ad__t_1adbbb6765386309476549beb058a235c5" kindref="member">logfp</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="236" refid="structcont__ad__t_1ac6e6809727ddc78a13674478d5b527db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structcont__ad__t_1ac6e6809727ddc78a13674478d5b527db" kindref="member">n_calib_frame</ref>;<sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal">}<sp/><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*<ref refid="cont__ad_8h_1af28bf56f17d5cfebf4d960ebed44ca64" kindref="member">cont_ad_init</ref><sp/>(<ref refid="structad__rec__t" kindref="compound">ad_rec_t</ref><sp/>*ad,<sp/><sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>(*adfunc)(<ref refid="structad__rec__t" kindref="compound">ad_rec_t</ref><sp/>*ad,<sp/>int16<sp/>*buf,<sp/>int32<sp/>max)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*<ref refid="cont__ad_8h_1a1a9bbf961917827f5d03adcd409dda35" kindref="member">cont_ad_init_rawmode</ref><sp/>(<ref refid="structad__rec__t" kindref="compound">ad_rec_t</ref><sp/>*ad,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>(*adfunc)(<ref refid="structad__rec__t" kindref="compound">ad_rec_t</ref><sp/>*ad,<sp/>int16<sp/>*buf,<sp/>int32<sp/>max));</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="303"><highlight class="normal">int32<sp/><ref refid="cont__ad_8h_1ae664132adc514db01a1d5c1209ded4ba" kindref="member">cont_ad_read</ref><sp/>(<ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16<sp/>*buf,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>max<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="316"><highlight class="normal">int32<sp/><ref refid="cont__ad_8h_1a680721acc14ac191bbae3a4940ed357d" kindref="member">cont_ad_buffer_space</ref>(<ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*r);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="331"><highlight class="normal">int32<sp/><ref refid="cont__ad_8h_1a7a1d0eaf8292a4549b00a97163999321" kindref="member">cont_ad_calib</ref><sp/>(<ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*cont<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="346"><highlight class="normal">int32<sp/><ref refid="cont__ad_8h_1a8a575044cf22d96a5ec8fb20410b0065" kindref="member">cont_ad_calib_loop</ref><sp/>(<ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*r,<sp/>int16<sp/>*buf,<sp/>int32<sp/>max);<sp/></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="360"><highlight class="normal">int32<sp/><ref refid="cont__ad_8h_1a6a86e16fb673748be753e2a281ce837a" kindref="member">cont_ad_calib_size</ref>(<ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*r);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="375"><highlight class="normal">int32<sp/><ref refid="cont__ad_8h_1af9a8f9f66bbfd1ce48fe9366fafcc40d" kindref="member">cont_ad_set_thresh</ref><sp/>(<ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*cont,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>sil,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>sp<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="389"><highlight class="normal">int32<sp/><ref refid="cont__ad_8h_1aa402397c575922ea352afe5e66c02a34" kindref="member">cont_ad_set_params</ref><sp/>(<ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*r,<sp/>int32<sp/>delta_sil,<sp/>int32<sp/>delta_speech,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>min_noise,<sp/>int32<sp/>max_noise,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>winsize,<sp/>int32<sp/>speech_onset,<sp/>int32<sp/>sil_onset,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>leader,<sp/>int32<sp/>trailer,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>adapt_rate);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="403"><highlight class="normal">int32<sp/><ref refid="cont__ad_8h_1aedd013bc2c6aca14fba02049ed7645d7" kindref="member">cont_ad_get_params</ref><sp/>(<ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*r,<sp/>int32<sp/>*delta_sil,<sp/>int32<sp/>*delta_speech,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*min_noise,<sp/>int32<sp/>*max_noise,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*winsize,<sp/>int32<sp/>*speech_onset,<sp/>int32<sp/>*sil_onset,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*leader,<sp/>int32<sp/>*trailer,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>*adapt_rate);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="414"><highlight class="normal">int32<sp/><ref refid="cont__ad_8h_1a12a017ea8a96dc54445e937bb9de24ae" kindref="member">cont_ad_reset</ref><sp/>(<ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*cont);<sp/><sp/></highlight><highlight class="comment">/*<sp/>In:<sp/>Object<sp/>pointer<sp/>from<sp/>cont_ad_init<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="421"><highlight class="normal">int32<sp/><ref refid="cont__ad_8h_1a381c3df971d43a20e8e8b8da43d2872d" kindref="member">cont_ad_close</ref><sp/>(<ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*cont);<sp/><sp/></highlight><highlight class="comment">/*<sp/>In:<sp/>Object<sp/>pointer<sp/>from<sp/>cont_ad_init<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cont__ad_8h_1a288394cd94a4992bec9d3911cc875767" kindref="member">cont_ad_powhist_dump</ref><sp/>(FILE<sp/>*fp,<sp/><ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*cont);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="436"><highlight class="normal">int32<sp/><ref refid="cont__ad_8h_1a8f8284f329d1c0e04856ec9d13020dc4" kindref="member">cont_ad_detach</ref><sp/>(<ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*c);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="445"><highlight class="normal">int32<sp/><ref refid="cont__ad_8h_1a41e7f8c5925dba26dd51e8f7a3d16404" kindref="member">cont_ad_attach</ref><sp/>(<ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*c,<sp/><ref refid="structad__rec__t" kindref="compound">ad_rec_t</ref><sp/>*a,<sp/>int32<sp/>(*func)(<ref refid="structad__rec__t" kindref="compound">ad_rec_t</ref><sp/>*,<sp/>int16<sp/>*,<sp/>int32));</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="460"><highlight class="normal">int32<sp/><ref refid="cont__ad_8h_1a662ed7c409479060e3b5ac8eb7bd1865" kindref="member">cont_ad_set_rawfp</ref><sp/>(<ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*c,<sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>cont_ad<sp/>object<sp/>being<sp/>addressed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*fp);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>File<sp/>to<sp/>which<sp/>raw<sp/>audio<sp/>data<sp/>is<sp/>to</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>dumped;<sp/>NULL<sp/>to<sp/>stop<sp/>dumping.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="472"><highlight class="normal">int32<sp/><ref refid="cont__ad_8h_1a16c5810eb19ed89522ef4c3394bbfe83" kindref="member">cont_ad_set_logfp</ref><sp/>(<ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*c,<sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>cont_ad<sp/>object<sp/>being<sp/>addressed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*fp);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>File<sp/>to<sp/>which<sp/>logs<sp/>are<sp/>written;</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL<sp/>to<sp/>stop<sp/>logging.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="485"><highlight class="normal">int32<sp/><ref refid="cont__ad_8h_1a382fe6375eae57a532c524d68bc3dd24" kindref="member">cont_set_thresh</ref>(<ref refid="structcont__ad__t" kindref="compound">cont_ad_t</ref><sp/>*r,<sp/>int32<sp/>silence,<sp/>int32<sp/>speech);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="488"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="490"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/gpuser/cmusphinx-code/sphinxbase/include/sphinxbase/cont_ad.h"/>
  </compounddef>
</doxygen>
